<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Wellphone&#39;s Blog</title>
    <link>https://wellphone.me/post/index.xml</link>
    <description>Recent content in Posts on Wellphone&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 08 Jun 2017 09:58:10 +0800</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>iOS自带悬浮窗调试工具使用详解</title>
      <link>https://wellphone.me/post/2017/use_uidebugginginformationoverlay_to_debug_ui/</link>
      <pubDate>Thu, 08 Jun 2017 09:58:10 +0800</pubDate>
      
      <guid>https://wellphone.me/post/2017/use_uidebugginginformationoverlay_to_debug_ui/</guid>
      <description>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前几天在博客上看到一篇文章《震惊！iOS 系统居然自带悬浮窗口调试工具》,看完之后笔者真就震惊了，有这样好的UI调试工具，苹果为什么不公开呢？笔者按照博文中的描述，在app中试了一下，感觉非常好用。
如何开启 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在 AppDelegate 的 didFinishLaunchingWithOptions 方法中加入以下代码就可以了。
#if DEBUG id overlayClass = NSClassFromString(@&amp;quot;UIDebuggingInformationOverlay&amp;quot;); [overlayClass performSelector:NSSelectorFromString(@&amp;quot;prepareDebuggingOverlay&amp;quot;)]; #endif  运行后，用两个手指头在状态栏上同时点击下就可以显示出这个调试的悬浮层。
悬浮窗主界面 可以看到大概有这样几个选项，
 View Hierarchy（查看View的层级关系）
 VC Hierarchy（查看ViewController层级关系）
 Ivar Explorer（查看UIApplication 的成员属性）
 Measure （测量View的尺寸）
 Spec Compare （对比设计图）
  View Hierarchy &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 进入到这个页面后，可以看见整个view的层级结构。悬浮窗右上角有个Inspect，点击这个可以高亮显示当前选择的View。如图所示：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
当前选中的是 SettingSwitchItemView。
我们在页面上选择一个swicth按钮，这时会定位到该view的条目，如图所示：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
我们点击右侧的“！”图标，进入到swicth的详情页面，这里展示了view的详西信息，并且可以修改一些属性，比如我们修改这个button的透明度，如图所示：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
VC Hierarchy &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们回到悬浮窗的主界面，进入到VC Hierarchy界面看看。
这里是所有的VC的层级关系，一目了然。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
Ivar Explorer &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;接下来我们去Ivar Explorer页面看一下。进到页面后，对里面的一些值不是很熟悉，不知道是哪里的一些值，不过里面，看见了我们熟悉的 AppDelegate 。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</description>
    </item>
    
    <item>
      <title>使用Interface Builder开发界面</title>
      <link>https://wellphone.me/post/2017/autolayout_demo/</link>
      <pubDate>Wed, 03 May 2017 09:51:08 +0800</pubDate>
      
      <guid>https://wellphone.me/post/2017/autolayout_demo/</guid>
      <description>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前在公司内部分享会上，简单的分享了下如何使用Interface Builder开发iOS界面以及几种界面开发的方式的优缺点。写了一篇文章，现在直接把这篇文章贴到了blog上。
认识IB IB 即 Interface Builder ，是集成到Xcode上的iOS界面可视化开发工具。
功能面板  对象库面板
提供了所有Cocoa Touch 库给我们定义好的界面组件，包括 View 组件和 Controller 组件(所有名字带 xxxxController 的组件)。
对象库中组件较多，为了查找方便，底部提供了搜索栏，功能强大，一般只要输入关键的几个字母，就能快速找到你需要的组件。
 主界面
主界面提供了一个设计区域，该区域中放入我们设计的所有组件，一般要先放入一个容器组件，如：UIView 视图。然后在视图中放入其他组件。
为了快速查看主界面中相关信息，可以通过左侧的侧边栏(Desk)查看。
 属性面板
在主界面选中某个组件后，在该区域可以查看并设置组件的属性。
  示例 demo下载
 新增一个按钮
 新增一个table
 IBInspectable / IBDesignable
  Autoresizing 技术介绍 autoresizing是UIView的属性，可以用来做一些简单的自动布局实现。   属性 描述   UIViewAutoresizingNone 不会随父视图的改变而改变    UIViewAutoresizingFlexibleLeftMargin 自动调整view与父视图左边距，以保证右边距不变   UIViewAutoresizingFlexibleWidth 自动调整view的宽度，保证左边距和右边距不变    UIViewAutoresizingFlexibleRightMargin 自动调整view与父视图右边距，以保证左边距不变    UIViewAutoresizingFlexibleTopMargin 自动调整view与父视图上边距，以保证下边距不变   UIViewAutoresizingFlexibleHeight 自动调整view的高度，以保证上边距和下边距不变   UIViewAutoresizingFlexibleBottomMargin 动调整view与父视图的下边距，以保证上边距不变</description>
    </item>
    
    <item>
      <title>AirPods远程控制适配</title>
      <link>https://wellphone.me/post/2017/airpods_remote_controll/</link>
      <pubDate>Mon, 24 Apr 2017 09:59:57 +0800</pubDate>
      
      <guid>https://wellphone.me/post/2017/airpods_remote_controll/</guid>
      <description>AirPods 16年底苹果推出了AirPods耳机。公司产品要适配AirPods，支持AirPods的远程控制。我在拿到耳机后，折腾了一会，连不上手机，竟然不知道怎么使用。～～～
上网找到了官方的使用方法：https://support.apple.com/zh-cn/HT207010
AirPods的远程控制默认是控制Siri和电话。快速施力轻点两下这个AirPod外侧可激活Siri或使用电话。这个不是我们App想要的远程控制，我们希望能通过AirPods来控制App的行为，即希望App能监听到AirPods的操作。在官方的使用说明中有这样一段话“如果您喜欢，您可以更改设置，使轻点两下时执行的操作变成播放或暂停音乐。”Ok，只要能双击播放，双击暂停音乐，那么App就能监听到远程控制事件，同线控耳机的那些远程控制事件一样。
下面是适配AirPods远程控制的一些小结。
AirPods在不同系统上的表现 AirPods在iOS10.2以下表现和普通的蓝牙耳机类似，能手动通过蓝牙连接上手机。
AirPods在iOS10.2以上的能支持双击操作，双击播放音乐，双击停止音乐；分别对应远程线控中的UIEventSubtypeRemoteControlPlay、UIEventSubtypeRemoteControlStop等事件。
如何监听远程控制事件：http://www.cnblogs.com/kenshincui/p/3950646.html#remoteControl
如何判断现在接入了AirPods 通过检查AVAudioSession的currentRoute中的输出port的名字，可以判断当前音频输出是否是AirPods
- (BOOL)isAirPods { NSArray&amp;lt;AVAudioSessionPortDescription *&amp;gt; *outputPorts = [AVAudioSession sharedInstance].currentRoute.outputs; for (AVAudioSessionPortDescription *desc in outputPorts) { if ([desc.portName rangeOfString:@&amp;quot;AirPods&amp;quot;].length &amp;gt; 0) { return YES; } } return NO; }  这个代码在iOS10以下的系统也能工作，在iOS10以下AirPods表现如同蓝牙耳机，并且，portName 还是AirPods。
如果需要用户在戴上耳机的时候检查是否是AirPods，可以监听系统发出的AVAudioSessionRouteChangeNotification通知，在route改变时，通过上面的代码检查下，就可以知道是否是用户带上了AirPods耳机。
有时，我们需要检查当前输出音频设备是否有蓝牙，也可以像上面的代码一样
- (BOOL)isBluetooth { NSArray&amp;lt;AVAudioSessionPortDescription *&amp;gt; *outputPorts = [AVAudioSession sharedInstance].currentRoute.outputs; for (AVAudioSessionPortDescription *desc in outputPorts) { if ([desc.portType isEqualToString:AVAudioSessionPortBluetoothA2DP] || [desc.portType isEqualToString:AVAudioSessionPortBluetoothLE] || [desc.portType isEqualToString:AVAudioSessionPortBluetoothHFP]) { return YES; } } return NO; }  AirPods的远程控制 这里说的AirPods远程控制，不是通过AirPods唤起Siri或者接系统电话，而是通过AirPods播放、停止音乐。 在连上AirPods后，需要在手机上进行设置，将AirPods的双击操作改成播放／停止音乐。具体设置方法见：https://support.</description>
    </item>
    
  </channel>
</rss>
